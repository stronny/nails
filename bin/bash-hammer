#!/usr/bin/env bash
#
# This is a wrapper for bash scripts to enable the usage of nails.
# To use it change the script's shebang to "#!/usr/bin/env bash-hammer".
#
# https://github.com/stronny/nails

# ----------------------------------------------------------------------------
# Check the requirements
#
if [[ "$BASH_VERSION" < '4' ]]; then
	echo 'bash-hammer requires bash version 4 or higher'
	exit 1
fi

# ----------------------------------------------------------------------------
# Check the arguments
#
case "$1" in
	''|-h|--help)
		echo 'Usage: bash-hammer filename [arguments]'
		echo '       This program is not intended to be run directly.'
		echo '       Please look inside to find out more.'
		exit
	;;
	--) shift ;;
	-*)
		echo "bash-hammer: $1: invalid option" >&2
		exit 1
	;;
esac

# ----------------------------------------------------------------------------
# Accomodate for the unset scoping
# http://wiki.bash-hackers.org/commands/builtin/unset
#
function Nails::BashHammer.unset_helper { unset -v "$@"; }

# ----------------------------------------------------------------------------
# Define the magic
#
# usage: require /nail             ([1] source nail/lib/nail.bash)
#        require /nail/path/file   ([2] source nail/lib/nail/path/file.bash)
#        require path/file         (like [2] inside the nail)
#        require                   (like [1] inside the nail)
#
function require {
	local target="$1"
	local nailname naildir nailfile filename version
	local caller caller_path caller_line
	local i part dir
	local -a parts dirs
	shift

	read caller_line caller_path caller_path < <(caller 0)
	caller="$caller_path:$caller_line"

	IFS='/' read -a parts <<< "$target"
	# determine nailname (empty is valid)
	#
	if [[ "${parts[0]}" || ${#parts[@]} -lt 1 ]]; then
		if [[ -z "${__NAILS_CURRENT[:name]}" ]]; then
			echo "$caller: $FUNCNAME: $target: relative target is only valid inside of a nail" >&2
			return 127
		fi
		nailname="${__NAILS_CURRENT[:name]}"
		naildir="${__NAILS_CURRENT[:path]}"
	else
		for i in "${!parts[@]}"; do
			part="${parts[$i]}"
			if [[ "$part" ]]; then
				nailname="$part"
				unset parts[$i]
				break
			else
				unset parts[$i]
			fi
		done
	fi
	if [[ -z "$nailname" ]]; then
		echo "$caller: $FUNCNAME: $target: could not determine nail name" >&2
		return 127
	fi

	# determine nailfile (empty is valid)
	#
	nailfile=''
	for part in "${parts[@]}"; do
		[[ "$part" ]] && nailfile+="/$part"
	done
	nailfile="/${nailname}${nailfile}"
	[[ "${__NAILS_FILES[$nailfile]}" ]] && return 0 # do not source the file twice

	# Determine nail dir
	#
	if [[ -z "$naildir" ]]; then
		[[ "${__NAILS_SPECS["$nailname:path"]}" ]] && naildir="${__NAILS_SPECS["$nailname:path"]}"
	fi
	if [[ -z "$naildir" ]]; then
		IFS=':' read -a dirs <<< "${__NAILS_PATH}"
		for dir in "${dirs[@]}"; do
			[[ "$dir" ]] || continue
#			version="$(cat "$dir/$nailname/spec/version" 2>/dev/null)" || true
			version="$(cat "$dir/$nailname/spec/version")" || true
			if [[ "$version" ]]; then
				naildir="$dir/$nailname"
				break
			fi
		done
	fi
	if [[ -z "$naildir" ]]; then
		echo "$caller: $FUNCNAME: $target: could not locate the nail $nailname" >&2
		return 127
	fi

	# Source the file
	#
	filename="$naildir/lib${nailfile}.bash"
	__NAILS_FILES["$nailfile"]="$filename"
	[[ "${__NAILS_SPECS["$nailname:path"]}" ]]    || __NAILS_SPECS["$nailname:path"]="$naildir"
	[[ "${__NAILS_SPECS["$nailname:version"]}" ]] || __NAILS_SPECS["$nailname:version"]="$version"
	local -A __NAILS_CURRENT
	__NAILS_CURRENT[:name]="$nailname"
	__NAILS_CURRENT[:path]="$naildir"
	__NAILS_CURRENT[:version]="$version"
	set -- "$filename" "$@"
	Nails::BashHammer.unset_helper target nailname naildir nailfile filename version caller caller_path caller_line i part dir parts dirs
	source -- "$@"
}

# ----------------------------------------------------------------------------
# Temporary function for environment setup (provides a scope for temp vars)
#
function __Nails::BashHammer.bootstrap! {
	local realname path version path name

	case "${__NAILS_PATH}" in
		'') declare -gx __NAILS_PATH="$HOME/.nails:/usr/lib/nails:/usr/local/lib/nails";; # assign default if empty
		*:)            __NAILS_PATH+="$HOME/.nails:/usr/lib/nails:/usr/local/lib/nails";; # if exists and ends with a colon, is concatenated with the default value
	esac
	declare -gA __NAILS_FILES # will hold entries like [/nail/path/file]=/real/path/nail/path/file.bash
	declare -gA __NAILS_SPECS # https://github.com/stronny/nails/wiki/specs
	declare -gA __NAILS_CURRENT

	realname="$(readlink -q -e -- "$0")" # we assume that bash-hammer is in nails/bin, but will check its spec/version
	path="$(dirname "$realname" | xargs -r -n 1 dirname)"
	version="$(cat "$path/spec/version" 2>/dev/null)" || true
	if [[ "$version" ]]; then
		__NAILS_SPECS[nails:path]="$path"
		__NAILS_SPECS[nails:version]="$version"
	fi

	realname="$(readlink -q -e -- "$1")" # we will assume the script is in the nail if the spec/version exists
	[[ "$realname" ]] || return
	path="$(dirname "$realname" | xargs -r -n 1 dirname)"
	version="$(cat "$path/spec/version" 2>/dev/null)" || true
	if [[ "$version" ]]; then
		name="$(basename "$path")"
		__NAILS_SPECS["$name:path"]="$path"
		__NAILS_SPECS["$name:version"]="$version"
		__NAILS_CURRENT[:name]="$name"
		__NAILS_CURRENT[:path]="$path"
		__NAILS_CURRENT[:version]="$version"
	fi
}

# ----------------------------------------------------------------------------
# Let's get dangerous!
#
__Nails::BashHammer.bootstrap! "$@"
unset -f __Nails::BashHammer.bootstrap!
shift
source -- "${BASH_ARGV[$#]}" "$@"
