#!/usr/bin/env bash
#
# This is a wrapper for bash scripts to enable the usage of nails.
# To use it change the script's shebang to "#!/usr/bin/env bash-hammer".
#
# https://github.com/stronny/nails

# ----------------------------------------------------------------------------
# Internal functions
#
bh.usage() {
	cat <<-END
		Usage: bash-hammer filename [arguments]
		       This program is not intended to be run directly.
		       Please look inside to find out more.
	END
}

bh.version() {
	echo "bash-hammer version ${__NAILS_VERSION}"
}

bh.err() {
	echo "$1" >&2;
}

bh.normalize_args() {
	local keys

	for i in "$@"; do
		case "$i" in
			--*) echo "$i";;

			-*)
				keys=( `echo "${i##*-}" | fold -w1` )

				[[ "${#keys[@]}" -gt 1 ]] && {
					for k in ${keys[@]}; do
						echo "-${k}"
					done
				} || {
					echo "$i"
				}
			;;

			*) echo "$i";;
		esac
	done
}

bh.parse_args() {
	while [[ "$1" ]]; do
		case "$1" in
			-h|--help) bh.usage; exit;;
			-v|-V|--version) bh.version; exit;;
			--) :;;
			-*)
				bh.err "Unrecognized key: $1"
				exit 1
			;;
			*) __ARGS+=( "$1" );;
		esac
		shift
	done
}

# ----------------------------------------------------------------------------
# Versions management
#
if [[ "$BASH_VERSION" < '4' ]]; then
	echo 'bash-hammer requires bash version 4 or higher'
	exit 1
fi
declare -gr __NAILS_VERSION='1.0.0-pre1'

# ----------------------------------------------------------------------------
# Check the arguments
#
bh.parse_args "$(bh.normalize_args "$@")"

[[ "${__ARGS[0]}" ]] || { bh.usage; exit 1; }

# ----------------------------------------------------------------------------
# Define the magic
#
function require {
	local nailfile="$1"
	local nail="${nailfile%%/*}"
	local dirs=( )
	local dir
	local filename
	local path
	local line
	shift

	IFS=':' read -a dirs <<< "${__NAILS_PATH}"
	for dir in "${dirs[@]}"; do
		filename="$dir/$nail/lib/$nailfile.bash"
		[[ "${__NAILS_FILES[$filename]}" ]] && return 0
		[[ -f "$filename" ]] && break
		filename=''
	done

	read line path path < <(caller 0)
	if [[ "$filename" ]]; then
		__NAILS_FILES["$filename"]="$path:$line"
		source "$filename" "$@"
	else
		echo "$path:$line: $FUNCNAME: $nailfile: no such file" >&2
		exit 127
	fi
}

# ----------------------------------------------------------------------------
# Let's get dangerous!
#
declare -g  __NAILS_PATH=~/.nails:/usr/local/lib/nails
declare -gA __NAILS_FILES
source "$@"
